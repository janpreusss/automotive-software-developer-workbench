project_name: project-1
git_version: 4.0.0
dev:
  software_factory:
    artifacts:
      retain: false
    sourcecode:
      retain: false
    cloudtrail:
      retain: false
    repository:
      name: project-1-dev
    vpc:
      ip_addresses: 10.1.0.0/16
    workbench:
      instance_type: m6i.large
      ami:
        ami_ids:
          eu_central_1: ami-09cf5e00bb63ed741
          us_east_1: ami-0fdaa9be8cfc23ac8
          ap_southeast_1: ami-02b9c4a08521412e7
      volumes:
        - size: 200
          device_name: /dev/sda1
      user_data:
        - |-
          # Set execution policy and activate Administrator account
          Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
          net user Administrator "Etas2024@" /active:Yes

          # Set environment variable and install required dependencies
          $toolPath = "c:\App_Installers\tools\rclone-v1.64.2-windows-amd64"
          [Environment]::SetEnvironmentVariable("Path", "$([Environment]::GetEnvironmentVariable('Path', 'Machine'));$toolPath", "Machine")
          aws configure set default.region $env:AWS_DEFAULT_REGION
          #pip install git-remote-s3

          # Setup the working directory and initialize the ascet workspace
          $workingDir = "C:\demo_etas\working-dir"
          $hookDir = "$workingDir\.git\hooks"

          if (!(Test-Path -Path $workingDir)) {
              git clone s3://$env:SOURCE_BUCKET_NAME/$env:GIT_VERSION-git/ $workingDir
              git config --global user.email "no-reply@etas.com"
              git config --global user.name "workbench"
              C:\ETAS\ASCET-DEVELOPER7.9\ascet.exe -nosplash -data C:\demo_etas\working-dir\ws -application org.eclipse.cdt.managedbuilder.core.headlessbuild -importAll C:\demo_etas\working-dir\src\ascet\main\ -cleanBuild all
          }

          # Setup git pre-push hook and trigger file
          if (!(Test-Path -Path "$hookDir\pre-push")) {
          $prePushContent = @'
          #!/bin/sh
          "/C/Program Files/7-zip/7z" a -tzip /C/demo_etas/working-dir/.git/hooks/trigger.zip -r /C/demo_etas/working-dir/.cb >NUL:
          aws s3 cp /c/demo_etas/working-dir/.git/hooks/trigger.zip s3://$SOURCE_BUCKET_NAME/trigger.zip >NUL:
          '@
              Set-Content -Path "$hookDir\pre-push" -Value $prePushContent -Force
          }
                
          # Setup the rclone configuration
          if(!(Test-Path -Path "C:\Users\Administrator\AppData\Roaming\rclone\rclone.conf" )) {
          $config = @"
          [remote]
          type = s3
          provider = AWS
          env_auth = true
          region = $env:AWS_DEFAULT_REGION
          location_constraint = $env:AWS_DEFAULT_REGION
          storage_class = STANDARD
          "@
            New-Item -Path "C:\Users\Administrator\AppData\Roaming\" -Name "rclone" -ItemType "directory" -force
            Set-Content "C:\Users\Administrator\AppData\Roaming\rclone\rclone.conf" $config
          }

          # Setup the rclone mount
          if(!(Test-Path -Path "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\rclone.bat" )) {
          $script = @"
          rclone mount remote:/$env:ARTIFACT_BUCKET_NAME C:\Users\Administrator\Desktop\Artifacts --no-console --log-file C:\Users\Administrator\AppData\Roaming\rclone\log.txt --vfs-cache-mode full
          "@
            Set-Content "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\rclone.bat" $script
          }

          # Setup scheduled task to check and update Git repository
          $checkGitScriptPath = "C:\checkgit.ps1"
          if (!(Test-Path -Path $checkGitScriptPath)) {
          $checkGitScript = @"
          if (!(Test-Path -Path "C:\demo_etas\working-dir\src")) {
            Set-Location -Path "C:\demo_etas\working-dir"
            git pull s3 master
            C:\ETAS\ASCET-DEVELOPER7.9\ascet.exe -nosplash -data C:\demo_etas\working-dir\ws -application org.eclipse.cdt.managedbuilder.core.headlessbuild -importAll C:\demo_etas\working-dir\src\ascet\main\ -cleanBuild all
          }
          "@
            Set-Content -Path $checkGitScriptPath -Value $checkGitScript -Force

            # Define the scheduled task action and trigger
            $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument $checkGitScriptPath
            $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 1) -RepetitionDuration (New-TimeSpan -Days 3650)
            $settings = New-ScheduledTaskSettingsSet -MultipleInstances Parallel

            # Register the scheduled task
            Register-ScheduledTask -TaskName "CheckGit" -Action $action -Trigger $trigger -Settings $settings -User "Administrator" -Password "Etas2024@"
          }
    workers:
      instance_type: m6i.xlarge
      ami:
        ami_ids:
          eu_central_1: ami-09cf5e00bb63ed741
          us_east_1: ami-0fdaa9be8cfc23ac8
          ap_southeast_1: ami-02b9c4a08521412e7
      min_capacity: 1
      max_capacity: 1
      volumes:
        - size: 200
          device_name: /dev/sda1
      user_data:
        - |-
          Set-ExecutionPolicy -ExecutionPolicy Unrestricted
          net user Administrator "Etas2024@" /active:Yes
          aws configure set default.region $env:AWS_DEFAULT_REGION
          pip install git-remote-s3
          if(!(Test-Path -Path "c:\demo_etas\working-dir\src" )) {
            Copy-Item -Path C:\App_Installers\tools\ETAS_Tools\aasf-etas-autosar-cp\repo -Destination c:\demo_etas\working-dir -Recurse
            aws s3 cp c:\demo_etas\working-dir s3://$env:SOURCE_BUCKET_NAME/$env:GIT_VERSION --recursive
            git config --global user.email "no-reply@etas.com"
            git config --global user.name "worker"
            $localRepoPath = "C:\demo_etas\working-dir"
            Set-Location $localRepoPath
            git init
            git add --all
            git commit -a -m  "Initial commit"
            git remote add s3 "s3://$env:SOURCE_BUCKET_NAME/$env:GIT_VERSION-git/"
            git push s3 master
            & "C:\Program Files\7-zip\7z" a -tzip C:\demo_etas\working-dir\.git\hooks\trigger.zip -r C:\demo_etas\working-dir\.cb
            aws s3 cp C:\demo_etas\working-dir\.git\hooks\trigger.zip s3://$env:SOURCE_BUCKET_NAME/trigger.zip
          }
          cosym --start --mode=headless --acknowledgement=yes
          if(!(Test-Path -Path "C:\checkworker.ps1" )) {
            $workerhome="C:\App_Installers\tools\ETAS_Tools\aasf-etas-autosar-cp\worker"
            python -m venv "$workerhome\.venv"
            & "$workerhome\.venv\Scripts\pip.exe" install -r "$workerhome\requirements.txt"
          $script = @"
          if (-not (Get-Process -Name python -ErrorAction SilentlyContinue)) {
            `$workerhome="$workerhome"
            `$python="`$workerhome\.venv\Scripts\python.exe"
            `$worker="`$workerhome\worker.py"
            Start-Process -filepath `$python -ArgumentList `$worker -Verb RunAs -WindowStyle Hidden
            get-date | Add-Content c:\checkworker.log
          }
          "@
            Set-Content "C:\checkworker.ps1" $script
            $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "C:\checkworker.ps1"
            $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 1) -RepetitionDuration (New-TimeSpan -Days 3650)
            $settings = New-ScheduledTaskSettingsSet -MultipleInstances Parallel
            Register-ScheduledTask -TaskName "CheckWorker" -Action $action -Trigger $trigger -Settings $settings -User Administrator -Password "Etas2024@"
          }
    stages:
      - name: MIL
        actions:
          - name: Testing
            buildspec: mil-testing.yml
          - name: EHBContainerBuild
            buildspec: ehb-container-build.yml
      - name: CodeGeneration
        actions:
          - name: ASWCodeGeneration
            buildspec: asw-codegeneration.yml
          - name: BSWCodeGeneration
            buildspec: bsw-codegeneration.yml
      - name: vECUBuild
        actions:
          - name: vECUBuild
            buildspec: vecu-build.yml
      - name: COSYMBuild
        actions:
          - name: COSYMBuild
            buildspec: cosym-build.yml
      - name: SILTesting
        actions:
          - name: ModelSimulator
            buildspec: model-simulator.yml